{"ast":null,"code":"import _slicedToArray from \"/Users/apple/Desktop/Netflix Video Clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/apple/Desktop/Netflix Video Clone/src/components/Video.js\";\nimport React, { useRef } from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport Controls from './Controls';\nimport ReactPlayer from 'react-player';\n\nfunction Video() {\n  var thisVideo = useRef(null);\n  var thisVideoContainer = useRef(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isPlaying = _useState2[0],\n      togglePlay = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isMuted = _useState4[0],\n      toggleMute = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isFullscreen = _useState6[0],\n      toggleFullscreen = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      percentageWatched = _useState8[0],\n      setPercentageWatched = _useState8[1]; // document.addEventListener('keyup', event => {\n  //   if(event.code === 'Space') {\n  //     handlePlay();\n  //   }\n  // })\n\n\n  function handlePlay() {\n    if (!isPlaying) {\n      thisVideo.current.play();\n    } else {\n      thisVideo.current.pause();\n    }\n\n    togglePlay(!isPlaying);\n  }\n\n  function back10() {\n    thisVideo.current.currentTime -= 10;\n  }\n\n  function forward10() {\n    thisVideo.current.currentTime += 10;\n  }\n\n  function mute() {\n    thisVideo.current.muted = !thisVideo.current.muted;\n    toggleMute(!isMuted);\n  }\n\n  function fullscreen() {\n    if (!isFullscreen) {\n      thisVideoContainer.current.requestFullscreen();\n    } else {\n      document.exitFullscreen();\n    }\n\n    toggleFullscreen(!isFullscreen);\n  }\n\n  useEffect(function () {\n    thisVideo.current.addEventListener('timeupdate', function () {\n      setPercentageWatched(thisVideo.current.currentTime / thisVideo.current.duration * 100 + \"%\");\n      console.log(percentageWatched);\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: thisVideoContainer,\n    className: \"video-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"video\", {\n    ref: thisVideo,\n    src: \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(Controls, {\n    handlePlay: handlePlay,\n    playButton: !isPlaying,\n    back10: back10,\n    forward10: forward10,\n    mute: mute,\n    muteButton: isMuted,\n    fullscreen: fullscreen,\n    fullscreenIcon: !isFullscreen,\n    percentageWatched: percentageWatched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 3\n    }\n  }));\n}\n\nexport default Video;","map":{"version":3,"sources":["/Users/apple/Desktop/Netflix Video Clone/src/components/Video.js"],"names":["React","useRef","useState","useEffect","Controls","ReactPlayer","Video","thisVideo","thisVideoContainer","isPlaying","togglePlay","isMuted","toggleMute","isFullscreen","toggleFullscreen","percentageWatched","setPercentageWatched","handlePlay","current","play","pause","back10","currentTime","forward10","mute","muted","fullscreen","requestFullscreen","document","exitFullscreen","addEventListener","duration","console","log"],"mappings":"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","sourcesContent":["import React, {useRef} from 'react';\nimport {useState} from 'react';\nimport {useEffect} from 'react';\nimport Controls from './Controls';\nimport ReactPlayer from 'react-player';\n\n\nfunction Video() {\n\n  const thisVideo = useRef(null);\n  const thisVideoContainer = useRef(null);\n  const [isPlaying, togglePlay] = useState(false);\n  const [isMuted, toggleMute] = useState(false);\n  const [isFullscreen, toggleFullscreen] = useState(false);\n  const [percentageWatched, setPercentageWatched ] = useState(0);\n\n\n  // document.addEventListener('keyup', event => {\n  //   if(event.code === 'Space') {\n  //     handlePlay();\n  //   }\n  // })\n\n  function handlePlay() {\n    if(!isPlaying) {\n      thisVideo.current.play();\n\n      \n\n    } else {\n      thisVideo.current.pause();\n    }\n    togglePlay(!isPlaying);\n  }\n\n\n  function back10() {\n    thisVideo.current.currentTime -= 10;\n  }\n\n  function forward10() {\n    thisVideo.current.currentTime += 10;\n  }\n\n  function mute() {\n\n      thisVideo.current.muted = !thisVideo.current.muted;\n      toggleMute(!isMuted);\n  }\n\n  \n\n  function fullscreen() {\n\n    if(!isFullscreen) {\n      thisVideoContainer.current.requestFullscreen();\n    } else {\n      document.exitFullscreen();\n    }\n    toggleFullscreen(!isFullscreen);\n  }\n     \n  useEffect(() => {\n    \n    thisVideo.current.addEventListener('timeupdate', () => {\n      setPercentageWatched(((thisVideo.current.currentTime / thisVideo.current.duration)*100)+\"%\");\n      console.log(percentageWatched);\n    });\n\n  })\n  return <div ref = {thisVideoContainer} className = \"video-container\">\n  <video ref = {thisVideo} src = \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\" \n     ></video>\n\n  <Controls \n    handlePlay = {handlePlay} \n    playButton = {!isPlaying}\n    back10 = {back10}\n    forward10 = {forward10}\n    mute = {mute}\n    muteButton = {isMuted}\n    fullscreen = {fullscreen}\n    fullscreenIcon = {!isFullscreen}\n    percentageWatched = {percentageWatched}\n  />\n</div>;\n}\n\nexport default Video;"]},"metadata":{},"sourceType":"module"}