{"ast":null,"code":"import _slicedToArray from \"/Users/apple/Desktop/Netflix Video Clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/apple/Desktop/Netflix Video Clone/src/components/Video.js\";\nimport React, { useRef } from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport Controls from './Controls';\nimport ReactPlayer from 'react-player';\n\nfunction Video() {\n  var thisVideo = useRef(null);\n  var thisVideoContainer = useRef(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isPlaying = _useState2[0],\n      togglePlay = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isMuted = _useState4[0],\n      toggleMute = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isFullscreen = _useState6[0],\n      toggleFullscreen = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      percentageWatched = _useState8[0],\n      setPercentageWatched = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      listened = _useState10[0],\n      updateListened = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      timeLeft = _useState12[0],\n      updateTimeLeft = _useState12[1];\n\n  var _useState13 = useState(1),\n      _useState14 = _slicedToArray(_useState13, 2),\n      videoSpeed = _useState14[0],\n      updateSpeed = _useState14[1];\n\n  var _useState15 = useState([.5, 0]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      volumePercentage = _useState16[0],\n      updateVolume = _useState16[1]; //////////play\n\n\n  function handlePlay() {\n    if (!isPlaying) {\n      thisVideo.current.play();\n    } else {\n      thisVideo.current.pause();\n    }\n\n    togglePlay(!isPlaying);\n  }\n\n  function back10() {\n    thisVideo.current.currentTime -= 10;\n  }\n\n  function forward10() {\n    thisVideo.current.currentTime += 10;\n  }\n\n  function goToTime(event) {\n    var target = event.target;\n    var parent = target.offsetParent;\n    var time = (event.pageX - (target.offsetLeft + parent.offsetLeft)) / target.offsetWidth;\n    thisVideo.current.currentTime = time * thisVideo.current.duration;\n  } //////////volume\n\n\n  function mute() {\n    if (!isMuted) {\n      thisVideo.current.volume = volumePercentage[1];\n    } else {\n      thisVideo.current.volume = volumePercentage[0];\n    }\n\n    thisVideo.current.muted = !thisVideo.current.muted;\n    toggleMute(!isMuted);\n  }\n\n  function changeVolume(value) {\n    console.log(value);\n    thisVideo.current.volume = value;\n    updateVolume([value, volumePercentage[1]]);\n    toggleMute(false);\n  }\n\n  function goToVolume(event) {\n    console.log('clicked');\n    var target = event.target;\n    var values = target.getBoundingClientRect();\n    console.log(values);\n    var top = values.top;\n    var bottom = values.bottom;\n    var distance = event.pageY;\n    var result = Math.abs((bottom - distance) / (bottom - top));\n    console.log(result);\n    changeVolume(Math.min(result, 1));\n  } //////////screen\n\n\n  function fullscreen() {\n    if (!isFullscreen) {\n      thisVideoContainer.current.requestFullscreen();\n    } else {\n      document.exitFullscreen();\n    }\n\n    toggleFullscreen(!isFullscreen);\n  }\n\n  document.addEventListener('fullscreenchange', function () {\n    if (!document.fullscreenElement) {\n      toggleFullscreen(false);\n    } else {\n      toggleFullscreen(true);\n    }\n  });\n\n  function changeSpeed(value) {\n    thisVideo.current.playbackRate = value;\n    updateSpeed(value);\n  } //////////time\n\n\n  useEffect(function () {\n    if (!listened) {\n      thisVideo.current.addEventListener('timeupdate', function () {\n        setPercentageWatched(thisVideo.current.currentTime / thisVideo.current.duration * 100 + \"%\");\n        updateTimeLeft(thisVideo.current.duration - thisVideo.current.currentTime);\n        updateListened(true);\n      });\n    }\n  }); //////////\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: thisVideoContainer,\n    className: \"video-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"video\", {\n    ref: thisVideo,\n    src: \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n    loop: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(Controls, {\n    handlePlay: handlePlay,\n    playButton: !isPlaying,\n    back10: back10,\n    forward10: forward10,\n    mute: mute,\n    muteButton: isMuted,\n    fullscreen: fullscreen,\n    fullscreenIcon: !isFullscreen,\n    percentageWatched: percentageWatched,\n    timeLeft: timeLeft,\n    goToTime: goToTime,\n    changeSpeed: changeSpeed,\n    videoSpeed: videoSpeed,\n    volumePercentage: isMuted ? volumePercentage[1] : volumePercentage[0],\n    goToVolume: goToVolume,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 3\n    }\n  }));\n}\n\nexport default Video;","map":{"version":3,"sources":["/Users/apple/Desktop/Netflix Video Clone/src/components/Video.js"],"names":["React","useRef","useState","useEffect","Controls","ReactPlayer","Video","thisVideo","thisVideoContainer","isPlaying","togglePlay","isMuted","toggleMute","isFullscreen","toggleFullscreen","percentageWatched","setPercentageWatched","listened","updateListened","timeLeft","updateTimeLeft","videoSpeed","updateSpeed","volumePercentage","updateVolume","handlePlay","current","play","pause","back10","currentTime","forward10","goToTime","event","target","parent","offsetParent","time","pageX","offsetLeft","offsetWidth","duration","mute","volume","muted","changeVolume","value","console","log","goToVolume","values","getBoundingClientRect","top","bottom","distance","pageY","result","Math","abs","min","fullscreen","requestFullscreen","document","exitFullscreen","addEventListener","fullscreenElement","changeSpeed","playbackRate"],"mappings":"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","sourcesContent":["import React, {useRef} from 'react';\nimport {useState} from 'react';\nimport {useEffect} from 'react';\nimport Controls from './Controls';\nimport ReactPlayer from 'react-player';\n\n\nfunction Video() {\n\n  const thisVideo = useRef(null);\n  const thisVideoContainer = useRef(null);\n  const [isPlaying, togglePlay] = useState(false);\n  const [isMuted, toggleMute] = useState(false);\n  const [isFullscreen, toggleFullscreen] = useState(false);\n  const [percentageWatched, setPercentageWatched ] = useState(0);\n  const [listened, updateListened] = useState(false);\n  const [timeLeft, updateTimeLeft] = useState(0);\n  const [videoSpeed, updateSpeed] = useState(1);\n  const [volumePercentage, updateVolume] = useState([.5,0]);\n\n\n//////////play\n\n  function handlePlay() {\n    if(!isPlaying) {\n      thisVideo.current.play();\n\n      \n\n    } else {\n      thisVideo.current.pause();\n    }\n    togglePlay(!isPlaying);\n  }\n\n\n  function back10() {\n    thisVideo.current.currentTime -= 10;\n  }\n\n  function forward10() {\n    thisVideo.current.currentTime += 10;\n  }\n\n  function goToTime(event) {\n    let target = event.target;\n    const parent = target.offsetParent;\n    const time = (event.pageX - (target.offsetLeft + parent.offsetLeft))/(target.offsetWidth);\n    thisVideo.current.currentTime = time*thisVideo.current.duration;\n  }\n\n  //////////volume\n  function mute() {\n\n      if(!isMuted) {\n        thisVideo.current.volume = volumePercentage[1];\n      } else {\n        thisVideo.current.volume = volumePercentage[0];\n      }\n\n      thisVideo.current.muted = !thisVideo.current.muted;\n      toggleMute(!isMuted);\n  }\n\n  function changeVolume(value) {\n    console.log(value);\n    thisVideo.current.volume = value;\n    updateVolume([value, volumePercentage[1]]);\n    toggleMute(false);\n  }\n\n  function goToVolume(event) {\n    console.log('clicked');\n    let target = event.target;\n    let values = target.getBoundingClientRect()\n    console.log(values);\n    const top = values.top;\n    const bottom = values.bottom;\n    const distance = event.pageY;\n    const result = Math.abs((bottom-distance)/(bottom-top));\n    console.log(result);\n    changeVolume(Math.min(result, 1));\n  }\n\n\n\n\n\n  //////////screen\n\n  function fullscreen() {\n\n    if(!isFullscreen) {\n      thisVideoContainer.current.requestFullscreen();\n    } else {\n      document.exitFullscreen();\n    }\n    toggleFullscreen(!isFullscreen);\n  }\n\n  document.addEventListener('fullscreenchange', () => {\n    if(!document.fullscreenElement) {\n      toggleFullscreen(false);\n    } else {\n      toggleFullscreen(true);\n    }\n  })\n\n  function changeSpeed(value) {\n    thisVideo.current.playbackRate = value;\n    updateSpeed(value);\n  }\n  \n//////////time\n     \n  useEffect(() => {\n    if(!listened) {\n    thisVideo.current.addEventListener('timeupdate', () => {\n      setPercentageWatched(((thisVideo.current.currentTime / thisVideo.current.duration)*100)+\"%\");\n      updateTimeLeft(thisVideo.current.duration - thisVideo.current.currentTime);\n      updateListened(true);\n    })\n  }\n});\n\n\n\n\n\n\n\n\n//////////\n  return <div ref = {thisVideoContainer} className = \"video-container\">\n  <video ref = {thisVideo} src = \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\" \n    loop ></video>\n\n  <Controls \n    handlePlay = {handlePlay} \n    playButton = {!isPlaying}\n    back10 = {back10}\n    forward10 = {forward10}\n    mute = {mute}\n    muteButton = {isMuted}\n    fullscreen = {fullscreen}\n    fullscreenIcon = {!isFullscreen}\n    percentageWatched = {percentageWatched}\n    timeLeft = {timeLeft}\n    goToTime = {goToTime}\n    changeSpeed = {changeSpeed}\n    videoSpeed = {videoSpeed}\n    volumePercentage = {isMuted ? volumePercentage[1] : volumePercentage[0]}\n    goToVolume = {goToVolume}\n  />\n</div>;\n}\n\nexport default Video;"]},"metadata":{},"sourceType":"module"}