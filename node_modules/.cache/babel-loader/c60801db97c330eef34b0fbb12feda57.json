{"ast":null,"code":"import _readOnlyError from \"/Users/apple/Desktop/Netflix Video Clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/readOnlyError\";\nimport _slicedToArray from \"/Users/apple/Desktop/Netflix Video Clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/apple/Desktop/Netflix Video Clone/src/components/Video.js\";\nimport React, { useRef } from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport Controls from './Controls';\nimport ReactPlayer from 'react-player';\n\nfunction Video() {\n  var thisVideo = useRef(null);\n  var thisVideoContainer = useRef(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isPlaying = _useState2[0],\n      togglePlay = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isMuted = _useState4[0],\n      toggleMute = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isFullscreen = _useState6[0],\n      toggleFullscreen = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      percentageWatched = _useState8[0],\n      setPercentageWatched = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      listened = _useState10[0],\n      updateListened = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      timeLeft = _useState12[0],\n      updateTimeLeft = _useState12[1];\n\n  function handlePlay() {\n    if (!isPlaying) {\n      thisVideo.current.play();\n    } else {\n      thisVideo.current.pause();\n    }\n\n    togglePlay(!isPlaying);\n  }\n\n  function back10() {\n    thisVideo.current.currentTime -= 10;\n  }\n\n  function forward10() {\n    thisVideo.current.currentTime += 10;\n  }\n\n  function mute() {\n    thisVideo.current.muted = !thisVideo.current.muted;\n    toggleMute(!isMuted);\n  }\n\n  function fullscreen() {\n    if (!isFullscreen) {\n      thisVideoContainer.current.requestFullscreen();\n    } else {\n      document.exitFullscreen();\n    }\n\n    toggleFullscreen(!isFullscreen);\n  }\n\n  function goToTime(event) {\n    var target = event.target;\n\n    if (target.className == \"watched-bar\") {\n      target = (_readOnlyError(\"target\"), target.offsetParent);\n    }\n\n    var parent = target.offsetParent;\n    console.log(\"x is \" + event.pageX);\n    console.log(\"this is\");\n    console.log(event.target.className);\n    console.log(\"parent is \");\n    console.log(event.target.offsetParent);\n    console.log(\"this.offsetWidth is \" + event.target.offsetWidth);\n    console.log(\"this.offsetLeft is \" + event.target.offsetLeft);\n    console.log(\"parent.offsetWidth is \" + event.target.offsetParent.offsetWidth);\n    console.log(\"parent.offsetLeft is \" + event.target.offsetParent.offsetLeft);\n    var time = (event.pageX - (target.offsetLeft + parent.offsetLeft)) / target.offsetWidth;\n    thisVideo.current.currentTime = time * thisVideo.current.duration;\n  }\n\n  useEffect(function () {\n    if (!listened) {\n      thisVideo.current.addEventListener('timeupdate', function () {\n        setPercentageWatched(thisVideo.current.currentTime / thisVideo.current.duration * 100 + \"%\");\n        updateTimeLeft(thisVideo.current.duration - thisVideo.current.currentTime);\n        updateListened(true);\n      });\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: thisVideoContainer,\n    className: \"video-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"video\", {\n    ref: thisVideo,\n    src: \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(Controls, {\n    handlePlay: handlePlay,\n    playButton: !isPlaying,\n    back10: back10,\n    forward10: forward10,\n    mute: mute,\n    muteButton: isMuted,\n    fullscreen: fullscreen,\n    fullscreenIcon: !isFullscreen,\n    percentageWatched: percentageWatched,\n    timeLeft: timeLeft,\n    goToTime: goToTime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 3\n    }\n  }));\n}\n\nexport default Video;","map":{"version":3,"sources":["/Users/apple/Desktop/Netflix Video Clone/src/components/Video.js"],"names":["React","useRef","useState","useEffect","Controls","ReactPlayer","Video","thisVideo","thisVideoContainer","isPlaying","togglePlay","isMuted","toggleMute","isFullscreen","toggleFullscreen","percentageWatched","setPercentageWatched","listened","updateListened","timeLeft","updateTimeLeft","handlePlay","current","play","pause","back10","currentTime","forward10","mute","muted","fullscreen","requestFullscreen","document","exitFullscreen","goToTime","event","target","className","offsetParent","parent","console","log","pageX","offsetWidth","offsetLeft","time","duration","addEventListener"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,MAAf,QAA4B,OAA5B;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,SAAQC,SAAR,QAAwB,OAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,WAAP,MAAwB,cAAxB;;AAGA,SAASC,KAAT,GAAiB;AAEf,MAAMC,SAAS,GAAGN,MAAM,CAAC,IAAD,CAAxB;AACA,MAAMO,kBAAkB,GAAGP,MAAM,CAAC,IAAD,CAAjC;;AAHe,kBAIiBC,QAAQ,CAAC,KAAD,CAJzB;AAAA;AAAA,MAIRO,SAJQ;AAAA,MAIGC,UAJH;;AAAA,mBAKeR,QAAQ,CAAC,KAAD,CALvB;AAAA;AAAA,MAKRS,OALQ;AAAA,MAKCC,UALD;;AAAA,mBAM0BV,QAAQ,CAAC,KAAD,CANlC;AAAA;AAAA,MAMRW,YANQ;AAAA,MAMMC,gBANN;;AAAA,mBAOoCZ,QAAQ,CAAC,CAAD,CAP5C;AAAA;AAAA,MAORa,iBAPQ;AAAA,MAOWC,oBAPX;;AAAA,mBAQoBd,QAAQ,CAAC,KAAD,CAR5B;AAAA;AAAA,MAQRe,QARQ;AAAA,MAQEC,cARF;;AAAA,oBASoBhB,QAAQ,CAAC,CAAD,CAT5B;AAAA;AAAA,MASRiB,QATQ;AAAA,MASEC,cATF;;AAaf,WAASC,UAAT,GAAsB;AACpB,QAAG,CAACZ,SAAJ,EAAe;AACbF,MAAAA,SAAS,CAACe,OAAV,CAAkBC,IAAlB;AAID,KALD,MAKO;AACLhB,MAAAA,SAAS,CAACe,OAAV,CAAkBE,KAAlB;AACD;;AACDd,IAAAA,UAAU,CAAC,CAACD,SAAF,CAAV;AACD;;AAGD,WAASgB,MAAT,GAAkB;AAChBlB,IAAAA,SAAS,CAACe,OAAV,CAAkBI,WAAlB,IAAiC,EAAjC;AACD;;AAED,WAASC,SAAT,GAAqB;AACnBpB,IAAAA,SAAS,CAACe,OAAV,CAAkBI,WAAlB,IAAiC,EAAjC;AACD;;AAED,WAASE,IAAT,GAAgB;AAEZrB,IAAAA,SAAS,CAACe,OAAV,CAAkBO,KAAlB,GAA0B,CAACtB,SAAS,CAACe,OAAV,CAAkBO,KAA7C;AACAjB,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACH;;AAID,WAASmB,UAAT,GAAsB;AAEpB,QAAG,CAACjB,YAAJ,EAAkB;AAChBL,MAAAA,kBAAkB,CAACc,OAAnB,CAA2BS,iBAA3B;AACD,KAFD,MAEO;AACLC,MAAAA,QAAQ,CAACC,cAAT;AACD;;AACDnB,IAAAA,gBAAgB,CAAC,CAACD,YAAF,CAAhB;AACD;;AAED,WAASqB,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,QAAMC,MAAM,GAAGD,KAAK,CAACC,MAArB;;AACA,QAAIA,MAAM,CAACC,SAAP,IAAoB,aAAxB,EAAuC;AACrCD,MAAAA,MAAM,8BAAGA,MAAM,CAACE,YAAV,CAAN;AACD;;AAED,QAAMC,MAAM,GAAGH,MAAM,CAACE,YAAtB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAQN,KAAK,CAACO,KAA1B;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACC,MAAN,CAAaC,SAAzB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACC,MAAN,CAAaE,YAAzB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAuBN,KAAK,CAACC,MAAN,CAAaO,WAAhD;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBN,KAAK,CAACC,MAAN,CAAaQ,UAAjD;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAA0BN,KAAK,CAACC,MAAN,CAAaE,YAAb,CAA0BK,WAAhE;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0BN,KAAK,CAACC,MAAN,CAAaE,YAAb,CAA0BM,UAAhE;AACA,QAAMC,IAAI,GAAG,CAACV,KAAK,CAACO,KAAN,IAAeN,MAAM,CAACQ,UAAP,GAAoBL,MAAM,CAACK,UAA1C,CAAD,IAAyDR,MAAM,CAACO,WAA7E;AACApC,IAAAA,SAAS,CAACe,OAAV,CAAkBI,WAAlB,GAAgCmB,IAAI,GAACtC,SAAS,CAACe,OAAV,CAAkBwB,QAAvD;AACD;;AAED3C,EAAAA,SAAS,CAAC,YAAM;AACd,QAAG,CAACc,QAAJ,EAAc;AACdV,MAAAA,SAAS,CAACe,OAAV,CAAkByB,gBAAlB,CAAmC,YAAnC,EAAiD,YAAM;AACrD/B,QAAAA,oBAAoB,CAAGT,SAAS,CAACe,OAAV,CAAkBI,WAAlB,GAAgCnB,SAAS,CAACe,OAAV,CAAkBwB,QAAnD,GAA6D,GAA9D,GAAmE,GAApE,CAApB;AACA1B,QAAAA,cAAc,CAACb,SAAS,CAACe,OAAV,CAAkBwB,QAAlB,GAA6BvC,SAAS,CAACe,OAAV,CAAkBI,WAAhD,CAAd;AACAR,QAAAA,cAAc,CAAC,IAAD,CAAd;AACD,OAJD;AAKD;AAEA,GATQ,CAAT;AAUA,sBAAO;AAAK,IAAA,GAAG,EAAIV,kBAAZ;AAAgC,IAAA,SAAS,EAAG,iBAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACP;AAAO,IAAA,GAAG,EAAID,SAAd;AAAyB,IAAA,GAAG,EAAG,mFAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADO,eAIP,oBAAC,QAAD;AACE,IAAA,UAAU,EAAIc,UADhB;AAEE,IAAA,UAAU,EAAI,CAACZ,SAFjB;AAGE,IAAA,MAAM,EAAIgB,MAHZ;AAIE,IAAA,SAAS,EAAIE,SAJf;AAKE,IAAA,IAAI,EAAIC,IALV;AAME,IAAA,UAAU,EAAIjB,OANhB;AAOE,IAAA,UAAU,EAAImB,UAPhB;AAQE,IAAA,cAAc,EAAI,CAACjB,YARrB;AASE,IAAA,iBAAiB,EAAIE,iBATvB;AAUE,IAAA,QAAQ,EAAII,QAVd;AAWE,IAAA,QAAQ,EAAIe,QAXd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJO,CAAP;AAkBD;;AAED,eAAe5B,KAAf","sourcesContent":["import React, {useRef} from 'react';\nimport {useState} from 'react';\nimport {useEffect} from 'react';\nimport Controls from './Controls';\nimport ReactPlayer from 'react-player';\n\n\nfunction Video() {\n\n  const thisVideo = useRef(null);\n  const thisVideoContainer = useRef(null);\n  const [isPlaying, togglePlay] = useState(false);\n  const [isMuted, toggleMute] = useState(false);\n  const [isFullscreen, toggleFullscreen] = useState(false);\n  const [percentageWatched, setPercentageWatched ] = useState(0);\n  const [listened, updateListened] = useState(false);\n  const [timeLeft, updateTimeLeft] = useState(0);\n\n\n\n  function handlePlay() {\n    if(!isPlaying) {\n      thisVideo.current.play();\n\n      \n\n    } else {\n      thisVideo.current.pause();\n    }\n    togglePlay(!isPlaying);\n  }\n\n\n  function back10() {\n    thisVideo.current.currentTime -= 10;\n  }\n\n  function forward10() {\n    thisVideo.current.currentTime += 10;\n  }\n\n  function mute() {\n\n      thisVideo.current.muted = !thisVideo.current.muted;\n      toggleMute(!isMuted);\n  }\n\n  \n\n  function fullscreen() {\n\n    if(!isFullscreen) {\n      thisVideoContainer.current.requestFullscreen();\n    } else {\n      document.exitFullscreen();\n    }\n    toggleFullscreen(!isFullscreen);\n  }\n\n  function goToTime(event) {\n    const target = event.target;\n    if (target.className == \"watched-bar\") {\n      target = target.offsetParent;\n    }\n\n    const parent = target.offsetParent;\n    console.log(\"x is \"+event.pageX);\n    console.log(\"this is\" );\n    console.log(event.target.className);\n    console.log(\"parent is \" );\n    console.log(event.target.offsetParent);\n    console.log(\"this.offsetWidth is \"+event.target.offsetWidth);\n    console.log(\"this.offsetLeft is \" + event.target.offsetLeft)\n    console.log(\"parent.offsetWidth is \" +event.target.offsetParent.offsetWidth);\n    console.log(\"parent.offsetLeft is \" + event.target.offsetParent.offsetLeft  )\n    const time = (event.pageX - (target.offsetLeft + parent.offsetLeft))/(target.offsetWidth);\n    thisVideo.current.currentTime = time*thisVideo.current.duration;\n  }\n     \n  useEffect(() => {\n    if(!listened) {\n    thisVideo.current.addEventListener('timeupdate', () => {\n      setPercentageWatched(((thisVideo.current.currentTime / thisVideo.current.duration)*100)+\"%\");\n      updateTimeLeft(thisVideo.current.duration - thisVideo.current.currentTime);\n      updateListened(true);\n    });\n  } \n\n  })\n  return <div ref = {thisVideoContainer} className = \"video-container\">\n  <video ref = {thisVideo} src = \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\" \n     ></video>\n\n  <Controls \n    handlePlay = {handlePlay} \n    playButton = {!isPlaying}\n    back10 = {back10}\n    forward10 = {forward10}\n    mute = {mute}\n    muteButton = {isMuted}\n    fullscreen = {fullscreen}\n    fullscreenIcon = {!isFullscreen}\n    percentageWatched = {percentageWatched}\n    timeLeft = {timeLeft}\n    goToTime = {goToTime}\n  />\n</div>;\n}\n\nexport default Video;"]},"metadata":{},"sourceType":"module"}